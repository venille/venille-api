import {
  IsHash,
  IsEnum,
  IsEmail,
  IsString,
  MaxLength,
  MinLength,
  IsNotEmpty,
  IsOptional,
  IsPhoneNumber,
  IsNumberString,
  IsDate,
  IsNumber,
  IsBoolean,
} from 'class-validator';
import { Transform } from 'class-transformer';
import { ApiProperty } from '@nestjs/swagger';
import {
  trimTransformer,
  toLowerCaseTransformer,
} from '@app/common/src/helpers/local-class-validator';
import {
  AdditionalTracking,
  BirthControlMethod,
  CycleGoal,
  HealthCondition,
  PeriodSymptom,
  ReminderType,
} from '@app/common/src/constants/enums';

export class UpdateFCMTokenDTO {
  @ApiProperty({
    example: '1733689739675',
    description: 'FCM token for push notifications generated by mobile device.',
  })
  @IsString()
  @IsNotEmpty()
  fcmToken: string;
}

export class UpdateProfileImageDTO {
  @ApiProperty({
    example: 'https://example.com/image.jpg',
    description: 'URL of the image to be uploaded.',
  })
  @IsString()
  @IsNotEmpty()
  imageUrl: string;
}

export class UpdateAccountPasswordDTO {
  @ApiProperty({
    example: 'Password123',
    description: 'Current account password.',
  })
  @IsString()
  @IsNotEmpty()
  currentPassword: string;

  @ApiProperty({
    example: 'Password@123',
    description: 'New account password.',
  })
  @IsString()
  @IsNotEmpty()
  newPassword: string;
}

export class DeleteAccountDTO {
  @ApiProperty({
    example: 'Password123',
    description: 'Current account password.',
  })
  @IsString()
  @IsNotEmpty()
  password: string;
}

export class UpdateAccountNameDTO {
  @ApiProperty({
    example: 'John',
    description: 'New account first name.',
  })
  @IsString()
  @IsNotEmpty()
  firstName: string;

  @ApiProperty({
    example: 'Doe',
    description: 'New account last name.',
  })
  @IsString()
  @IsNotEmpty()
  lastName: string;
}

export class UpdateAccountEmailDTO {
  @ApiProperty({
    example: 'kunle@gmail.com',
    description: 'New account email.',
  })
  @IsEmail()
  @IsNotEmpty()
  @Transform(({ value }) => trimTransformer(toLowerCaseTransformer(value)))
  newEmail: string;
}

export class VerifyNewAccountEmailDTO {
  @ApiProperty({
    example: '3950',
    description: 'Activation token (OTP)',
  })
  @IsString()
  @IsNotEmpty()
  otp: string;
}

export class UpdateAccountPhoneDTO {
  @ApiProperty({
    example: '+2349093920293',
    description: 'New account phone.',
  })
  @IsNotEmpty()
  @IsString()
  @Transform(({ value }) => trimTransformer(value))
  newPhone: string;

  @ApiProperty({
    example: 'Password123',
    description: 'Account password.',
  })
  @IsString()
  @IsNotEmpty()
  password: string;
}

export class UpdateAccountLocationDTO {
  @ApiProperty({
    example: 'Lagos',
    description: 'User state.',
  })
  @IsString()
  @IsNotEmpty()
  state: string;

  @ApiProperty({
    example: 'Ikeja',
    description: 'User city.',
  })
  @IsString()
  @IsNotEmpty()
  city: string;
}

export class RegisterPeriodTrackerDTO {
  @ApiProperty({
    example: '2024-01-01',
    description: 'Date of first period.',
  })
  @IsDate()
  @IsNotEmpty()
  lastPeriodStartDate: Date;

  @ApiProperty({
    example: 28,
    description: 'Length of period in days.',
  })
  @IsNumber()
  @IsNotEmpty()
  periodLengthDays: number;

  @ApiProperty({
    example: 28,
    description: 'Length of cycle in days.',
  })
  @IsNumber()
  @IsNotEmpty()
  cycleLengthDays: number;

  @ApiProperty({
    example: true,
    description: 'Is the period irregular?',
  })
  @IsBoolean()
  @IsNotEmpty()
  irregularPeriods: boolean;

  @ApiProperty({
    example: 'cramps',
    enum: PeriodSymptom,
    description: 'Period symptoms.',
  })
  @IsString()
  @IsNotEmpty()
  periodSymptoms: PeriodSymptom;

  @ApiProperty({
    example: true,
    description: 'Is the user tracking ovulation?',
  })
  @IsBoolean()
  @IsNotEmpty()
  trackingOvulation: boolean;

  @ApiProperty({
    example: 28,
    description: 'Age of the user.',
  })
  @IsNumber()
  @IsNotEmpty()
  age: number;

  @ApiProperty({
    example: 'pill',
    enum: BirthControlMethod,
    description: 'Birth control method.',
  })
  @IsString()
  @IsNotEmpty()
  birthControlMethods: BirthControlMethod;

  @ApiProperty({
    example: 'pcos',
    enum: HealthCondition,
    description: 'Health condition.',
  })
  @IsString()
  @IsNotEmpty()
  healthConditions: HealthCondition;

  // @ApiProperty({
  //   example: 'mood',
  //   enum: AdditionalTracking,
  //   description: 'Additional tracking.',
  // })
  // @IsString()
  // @IsNotEmpty()
  // additionalTracking: AdditionalTracking;

  // @ApiProperty({
  //   example: true,
  //   description: 'Is the user want reminders?',
  // })
  // @IsBoolean()
  // @IsNotEmpty()
  // wantReminders: boolean;

  // @ApiProperty({
  //   example: 'period_start',
  //   enum: ReminderType,
  //   description: 'Reminder type.',
  // })
  // @IsString()
  // @IsNotEmpty()
  // reminderTypes: ReminderType;

  @ApiProperty({
    example: 'just_tracking',
    enum: CycleGoal,
    description: 'Cycle goal.',
  })
  @IsString()
  @IsNotEmpty()
  cycleGoal: CycleGoal;
}
